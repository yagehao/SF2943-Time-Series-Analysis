# import library
library(ggplot2)
library(forecast)
library(dplyr)
library(lubridate)
#library(sarima)
library(itsmr)
# data preparation
data <- read.csv("C:/Users/haoya/OneDrive/Desktop/SF2943/project/PART1/GlobalTemperatures.csv")
datalim =data[1501:3132,1:3] # time 1875.1-2010.12
datalim = na.omit(datalim)
data_ts_raw = ts(data = datalim$LandAverageTemperature, start = decimal_date(ymd('1875-01-01'))) #, frequency = 12) # convert into time series
# explanatory data analysis
data_ts_plot = ts(data = datalim$LandAverageTemperature[1:20], start = decimal_date(ymd('1875-01-01')))
plot(data_ts_plot) # plot time series
data_ts_plot = ts(data = datalim$LandAverageTemperature[1:100], start = decimal_date(ymd('1875-01-01')))
plot(data_ts_plot) # plot time series
data_ts_plot = ts(data = datalim$LandAverageTemperature[500:600], start = decimal_date(ymd('1875-01-01')))
plot(data_ts_plot) # plot time series
# explanatory data analysis
data_ts_plot = ts(data = datalim$LandAverageTemperature[500:800], start = decimal_date(ymd('1875-01-01')))
plot(data_ts_plot) # plot time series
# explanatory data analysis
data_ts_plot = ts(data = datalim$LandAverageTemperature[500:800], start = decimal_date(ymd('1875-01-01')), frequency=12)
plot(data_ts_plot) # plot time series
library(lubridate)
#library(sarima)
library(itsmr)
# data preparation
data <- read.csv("C:/Users/haoya/OneDrive/Desktop/SF2943/project/PART1/GlobalTemperatures.csv")
datalim =data[1501:3132,1:3] # time 1875.1-2010.12
datalim = na.omit(datalim)
data_ts_raw = ts(data = datalim$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')), frequency = 12) # convert into time series
# explanatory data analysis
data_ts_plot = ts(data = datalim$LandAverageTemperature[500:800], start = decimal_date(ymd('1875-01-01')), frequency=12)
plot(data_ts_plot) # plot part of the whole time series
plot(datalim$LandAverageTemperatureUncertainty) # plot uncertainty
temp = datalim$LandAverageTemperature
plotc(trend(temp, 1)) # plot trend
plotc(season(temp, 12)) # plot seasonality
# remove trend and seasonality
data_ts1 = diff(data_ts_raw) # generate first difference of ts
plot(data_ts1)
data_ts2 = diff(data_ts_raw, lag = 12) # generate a diff of ts with lag=12
plot(data_ts2)
data_ts <- data_ts2
# remove trend and seasonality
data_ts1 = diff(data_ts_raw) # generate first difference of ts
plot(data_ts1)
# explanatory data analysis
plot(data_ts_raw)
# remove trend and seasonality
data_ts1 = diff(data_ts_raw) # generate first difference of ts
plot(data_ts1)
data_ts2 = diff(data_ts_raw, lag = 12) # generate a diff of ts with lag=12
plot(data_ts2)
data_ts <- data_ts2
data_ts_f1 = ts(data = datalim$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')))
acf(data_ts_f1, lag.max=50)
pacf(data_ts_f1, lag.max=50)
# ACF and PACF
layout(1:2)
data_ts_f1 = ts(data = datalim$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')))
acf(data_ts_f1, lag.max=50)
pacf(data_ts_f1, lag.max=50)
acf(data_ts_f1, lag.max=100)
pacf(data_ts_f1, lag.max=50)
# ACF and PACF
layout(1:2)
acf(data_ts, lag.max=50)
pacf(data_ts, lag.max=50)
# import library
library(ggplot2)
library(forecast)
library(dplyr)
library(lubridate)
#library(sarima)
library(itsmr)
# data preparation
data <- read.csv("C:/Users/haoya/OneDrive/Desktop/SF2943/project/PART1/GlobalTemperatures.csv")
datalim =data[1501:3132,1:3] # time 1875.1-2010.12
datalim = na.omit(datalim)
data_ts_raw = ts(data = datalim$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')), frequency = 12) # convert into time series
# explanatory data analysis
plot(data_ts_raw)
data_ts_plot = ts(data = datalim$LandAverageTemperature[500:800], start = decimal_date(ymd('1875-01-01')), frequency=12)
plot(data_ts_plot) # plot part of the whole time series
plot(datalim$LandAverageTemperatureUncertainty) # plot uncertainty
temp = datalim$LandAverageTemperature
plotc(trend(temp, 1)) # plot trend
plotc(season(temp, 12)) # plot seasonality
# remove trend and seasonality
data_ts1 = diff(data_ts_raw) # generate first difference of ts
plot(data_ts1)
data_ts2 = diff(data_ts_raw, lag = 12) # generate a diff of ts with lag=12
plot(data_ts2)
data_ts <- data_ts2
# ACF and PACF
layout(1:2)
acf(data_ts, lag.max=50)
pacf(data_ts, lag.max=50)
# automatically fit model using auto.arima function
train = data[1501:3132, 1:3]
test = data[3133:3192, 1:3]
train_ts = ts(data = train$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')), frequency = 12)
automodel <- auto.arima(train_ts, parallel=TRUE, num.cores=4, stepwise=FALSE, approximation=FALSE)
summary(automodel)
checkresiduals(automodel)
# automatically fit model using auto.arima function
train = data[1501:3132, 1:3]
test = data[3133:3192, 1:3]
train_ts = ts(data = train$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')), frequency = 12)
train_ts = data_ts_raw
summary(train_ts)
train_ts
train_ts[1632]
View(data)
# automatically fit model using auto.arima function
train = data[1501:3132, 1:3]
test = data[3133:3192, 1:3]
train_ts = data_ts_raw
automodel <- auto.arima(train_ts, parallel=TRUE, num.cores=4, stepwise=FALSE, approximation=FALSE)
summary(automodel)
checkresiduals(automodel)
# choose parameter p and q automatically
automodel1 <- auto.arima(data_ts, stepwise=FALSE, parallel=TRUE, num.cores=4, approximation=FALSE)
summary(automodel1)
checkresiduals(automodel1)
data_ts_raw = ts(data = datalim$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')))#, frequency = 12) # convert into time series
# remove trend and seasonality
data_ts1 = diff(data_ts_raw) # generate first difference of ts
plot(data_ts1)
data_ts2 = diff(data_ts_raw, lag = 12) # generate a diff of ts with lag=12
plot(data_ts2)
data_ts <- data_ts2
# ACF and PACF
layout(1:2)
acf(data_ts, lag.max=50)
pacf(data_ts, lag.max=50)
# model fit and residual check
# MA(12)
model1 <- arima(data_ts, order = c(0,0,12))
AIC(model1)
# choose parameter p and q automatically
automodel1 <- auto.arima(data_ts, stepwise=FALSE, parallel=TRUE, num.cores=4, approximation=FALSE)
summary(automodel1)
checkresiduals(automodel1)
train_ts = ts(data = train$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')), frequency = 12)
automodel2 <- auto.arima(train_ts, parallel=TRUE, num.cores=4, stepwise=FALSE, approximation=FALSE)
summary(automodel2)
checkresiduals(automodel2)
# remove trend and seasonality
data_ts1 = diff(data_ts_raw) # generate first difference of ts
plot(data_ts1) # remove trend
data_ts = diff(data_ts_ts1, lag = 12) # generate a diff of ts with lag=12
plot(data_ts) # remove seasonality
# ACF and PACF
layout(1:2)
acf(data_ts, lag.max=50)
pacf(data_ts, lag.max=50)
# remove trend and seasonality
data_ts1 = diff(data_ts_raw) # generate first difference of ts
plot(data_ts1) # remove trend
data_ts = diff(data_ts1, lag = 12) # generate a diff of ts with lag=12
plot(data_ts) # remove seasonality
# ACF and PACF
layout(1:2)
acf(data_ts, lag.max=50)
pacf(data_ts, lag.max=50)
# choose parameter p and q automatically
automodel1 <- auto.arima(data_ts, stepwise=FALSE, parallel=TRUE, num.cores=4, approximation=FALSE)
summary(automodel1)
checkresiduals(automodel1)
checkresiduals(automodel2)
# model fit and residual check
# MA(12)
model1 <- arima(data_ts, order = c(0,0,12))
AIC(model1)
checkresiduals(model1)
# model fit and residual check
# MA(12)
model1 <- arima(data_ts, order = c(3,0,0))
summary(model1)
checkresiduals(model1)
# model fit and residual check
# MA(12)
model1 <- arima(data_ts, order = c(4,0,1))
summary(model1)
checkresiduals(model1)
# import library
library(ggplot2)
library(forecast)
library(dplyr)
library(lubridate)
#library(sarima)
library(itsmr)
# data preparation
data <- read.csv("C:/Users/haoya/OneDrive/Desktop/SF2943/project/PART1/GlobalTemperatures.csv")
datalim =data[1501:3132,1:3] # time 1875.1-2010.12
datalim = na.omit(datalim)
data_ts_raw = ts(data = datalim$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')))#, frequency = 12) # convert into time series
# explanatory data analysis
plot(data_ts_raw)
data_ts_plot = ts(data = datalim$LandAverageTemperature[500:800], start = decimal_date(ymd('1875-01-01')), frequency=12)
plot(data_ts_plot) # plot part of the whole time series
plot(datalim$LandAverageTemperatureUncertainty) # plot uncertainty
temp = datalim$LandAverageTemperature
plotc(trend(temp, 1)) # plot trend
plotc(season(temp, 12)) # plot seasonality
# remove trend and seasonality
data_ts1 = diff(data_ts_raw) # generate first difference of ts
plot(data_ts1) # remove trend
data_ts = diff(data_ts1, lag = 12) # generate a diff of ts with lag=12
plot(data_ts) # remove seasonality
# ACF and PACF
layout(1:2)
acf(data_ts, lag.max=50)
pacf(data_ts, lag.max=50)
# model fit and residual check
# auto.arima on preprocessed stationary time series
automodel1 <- auto.arima(data_ts, stepwise=FALSE, parallel=TRUE, num.cores=4, approximation=FALSE)
summary(automodel1)
checkresiduals(automodel1)
# auto.arima on original seasonal increasing time series
train = data[1501:3132, 1:3]
test = data[3133:3192, 1:3]
train_ts = ts(data = train$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')), frequency = 12)
automodel2 <- auto.arima(train_ts, parallel=TRUE, num.cores=4, stepwise=FALSE, approximation=FALSE)
summary(automodel2)
checkresiduals(automodel2)
# manually fit ARMA(4,1), choose parameters based on auto.arima result
model1 <- arima(data_ts, order = c(4,0,1))
summary(model1)
checkresiduals(model1)
# import library
library(ggplot2)
library(forecast)
library(dplyr)
library(lubridate)
#library(sarima)
library(itsmr)
# data preparation
data <- read.csv("C:/Users/haoya/OneDrive/Desktop/SF2943/project/PART1/GlobalTemperatures.csv")
datalim =data[1501:3132,1:3] # time 1875.1-2010.12
datalim = na.omit(datalim)
data_ts_raw = ts(data = datalim$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')))#, frequency = 12) # convert into time series
# explanatory data analysis
plot(data_ts_raw)
data_ts_plot = ts(data = datalim$LandAverageTemperature[500:800], start = decimal_date(ymd('1875-01-01')), frequency=12)
plot(data_ts_plot) # plot part of the whole time series
plot(datalim$LandAverageTemperatureUncertainty) # plot uncertainty
temp = datalim$LandAverageTemperature
plotc(trend(temp, 1)) # plot trend
plotc(season(temp, 12)) # plot seasonality
# remove trend and seasonality
data_ts1 = diff(data_ts_raw) # generate first difference of ts
plot(data_ts1) # remove trend
data_ts = diff(data_ts1, lag = 12) # generate a diff of ts with lag=12
plot(data_ts) # remove seasonality
# ACF and PACF
layout(1:2)
acf(data_ts, lag.max=50)
pacf(data_ts, lag.max=50)
# model fit and residual check
# auto.arima on preprocessed stationary time series
automodel1 <- auto.arima(data_ts, stepwise=FALSE, parallel=TRUE, num.cores=4, approximation=FALSE)
summary(automodel1)
checkresiduals(automodel1)
# auto.arima on original seasonal increasing time series
train = data[1501:3132, 1:3]
test = data[3133:3192, 1:3]
train_ts = ts(data = train$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')), frequency = 12)
automodel2 <- auto.arima(train_ts, parallel=TRUE, num.cores=4, stepwise=FALSE, approximation=FALSE)
summary(automodel2)
checkresiduals(automodel2)
# manually fit ARMA(4,1), choose parameters based on auto.arima result
model1 <- arima(data_ts, order = c(4,0,1))
summary(model1)
checkresiduals(model1)
# manually fit ARMA(10,11), choose parameters based on Ioannis's best finding
model2 <- arima(data_ts, order = c(10,0,11))
summary(model2)
checkresiduals(model2)
# forecasting
pred_auto1 <-Forecast.Arima(fitARIMA, h = 5, level = c(99.5))
# forecasting
pred_auto1 <- forecast.Arima(fitARIMA, h = 5, level = c(99.5))
# forecasting
pred_auto1 <- forecast(fitARIMA, h = 5, level = c(99.5))
# forecasting
pred_auto1 <- forecast(fitARIMA, h = 5, level = c(99.5))
library(forecast)
# forecasting
autoplot(forecast(automodel1, h=5, alpha=0.05))
# forecasting
autoplot(forecast(automodel1))
# forecasting
autoplot(forecast(train_ts, model=automodel1, h=5, alpha=0.05))
# forecasting
autoplot(forecast(train_ts, automodel1, h=5, alpha=0.05))
# forecasting
autoplot(forecast(data_ts, automodel1, h=5, alpha=0.05))
# forecasting
pred_auto1 <- forecast(object=data_ts, model=automodel1)
# forecasting
pred_auto1 <- forecast :: forecast(object=data_ts, model=automodel1)
plot(x=data_ts, y=pred_auto1$fitted,xlab='Actual', ylab='Predicted')
autoplot(pred_auto1)
plot(x=test, y=pred_auto1$fitted,xlab='Actual', ylab='Predicted')
plot(x=test$LandAverageTemperature, y=pred_auto1$fitted,xlab='Actual', ylab='Predicted')
View(pred_auto1)
# forecasting
test_ts = ts(data = test$LandAverageTemperature, start = decimal_date(ymd('2011-01-01')), frequency = 12)
pred_auto1 <- forecast :: forecast(object=test_ts, model=automodel1)
autoplot(pred_auto1)
pred_auto1 <- forecast :: forecast(object=test_ts, model=automodel1, h=5, alpha=0.05)
autoplot(pred_auto1)
pred_auto1 <- forecast :: forecast(object=test_ts, model=automodel1, h=4, alpha=0.05)
autoplot(pred_auto1)
pred_auto1 <- forecast :: forecast(object=test_ts, model=automodel1)
autoplot(pred_auto1)
plot(x=test$LandAverageTemperature, y=pred_auto1$fitted,xlab='Actual', ylab='Predicted')
layout(1:1)
autoplot(pred_auto1)
plot(x=test$LandAverageTemperature, y=pred_auto1$fitted,xlab='Actual', ylab='Predicted')
autoplot(pred_auto1)
# ARIMA()
pred_auto2 <- forecast :: forecast(object=test_ts, model=automodel2)
autoplot(pred_auto2)
plot(x=test$LandAverageTemperature, y=pred_auto2$fitted,xlab='Actual', ylab='Predicted')
# ARMA(4,1)
pred1 <- forecast :: forecast(object=test_ts, model=model1)
autoplot(pred1)
plot(x=test$LandAverageTemperature, y=pred1$fitted,xlab='Actual', ylab='Predicted')
autoplot(pred_auto1)
plot(x=test$LandAverageTemperature, y=pred_auto2$fitted,xlab='Actual', ylab='Predicted')
# ARIMA(3,0,0)(1,1,1)[12]
pred_auto2 <- forecast :: forecast(object=test_ts, model=automodel2)
# ARIMA(3,0,0)(1,1,1)[12]
pred_auto2 <- forecast :: forecast(object=test_ts, model=automodel2)
autoplot(pred_auto2)
plot(x=test$LandAverageTemperature, y=pred_auto2$fitted,xlab='Actual', ylab='Predicted')
autoplot(pred_auto1)
autoplot(pred_auto2)
autoplot(pred1)
plot(x=test$LandAverageTemperature, y=pred_auto1$fitted,xlab='Actual', ylab='Predicted')
autoplot(pred_auto2)
plot(x=test$LandAverageTemperature, y=pred_auto2$fitted,xlab='Actual', ylab='Predicted')
plot(x=test$LandAverageTemperature, y=pred1$fitted,xlab='Actual', ylab='Predicted')
# **Encoding: utf-8**
# **author: Yage Hao (yage@kth.se)**
# import library
library(ggplot2)
library(forecast)
library(dplyr)
library(lubridate)
#library(sarima)
library(itsmr)
# data preparation
data <- read.csv("C:/Users/haoya/OneDrive/Desktop/SF2943/project/PART1/GlobalTemperatures.csv")
datalim =data[1501:3132,1:3] # time 1875.1-2010.12
datalim = na.omit(datalim)
data_ts_raw = ts(data = datalim$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')))#, frequency = 12) # convert into time series
# explanatory data analysis
plot(data_ts_raw)
data_ts_plot = ts(data = datalim$LandAverageTemperature[500:800], start = decimal_date(ymd('1875-01-01')), frequency=12)
plot(data_ts_plot) # plot part of the whole time series
plot(datalim$LandAverageTemperatureUncertainty) # plot uncertainty
temp = datalim$LandAverageTemperature
plotc(trend(temp, 1)) # plot trend
plotc(season(temp, 12)) # plot seasonality
# remove trend and seasonality
data_ts1 = diff(data_ts_raw) # generate first difference of ts
plot(data_ts1) # remove trend
data_ts = diff(data_ts1, lag = 12) # generate a diff of ts with lag=12
plot(data_ts) # remove seasonality
# ACF and PACF
layout(1:1)
acf(data_ts, lag.max=50)
pacf(data_ts, lag.max=50)
# model fit and residual check
# auto.arima on preprocessed stationary time series
automodel1 <- auto.arima(data_ts, stepwise=FALSE, parallel=TRUE, num.cores=4, approximation=FALSE)
summary(automodel1)
checkresiduals(automodel1)
# auto.arima on original seasonal increasing time series
train = data[1501:3132, 1:3]
test = data[3133:3192, 1:3]
train_ts = ts(data = train$LandAverageTemperature, start = decimal_date(ymd('1875-01-01')), frequency = 12)
#automodel2 <- auto.arima(train_ts, parallel=TRUE, num.cores=4, stepwise=FALSE, approximation=FALSE)
#summary(automodel2)
#checkresiduals(automodel2)
# manually fit ARMA(4,1), choose parameters based on auto.arima result
model1 <- arima(data_ts, order = c(4,0,1))
summary(model1)
checkresiduals(model1)
# forecasting
test_ts = ts(data = test$LandAverageTemperature, start = decimal_date(ymd('2011-01-01')), frequency = 12)
test_ts1 = diff(test_ts) #remove trend
test_ts2 = diff(test_ts1, lag = 12) #remove seasonality
# MA(2)
pred_auto1 <- forecast :: forecast(object=test_ts2, model=automodel1)
autoplot(pred_auto1)
plot(x=test$LandAverageTemperature, y=pred_auto1$fitted,xlab='Actual', ylab='Predicted')
plot(x=test_ts2, y=pred_auto1$fitted,xlab='Actual', ylab='Predicted')
plot(x=test_ts1, y=pred_auto1$fitted,xlab='Actual', ylab='Predicted')
# ARMA(4,1)
pred1 <- forecast :: forecast(object=test_ts, model=model1)
# ARMA(4,1)
pred1 <- forecast :: forecast(object=test_ts2, model=model1)
autoplot(pred1)
plot(x=test$LandAverageTemperature, y=pred1$fitted,xlab='Actual', ylab='Predicted')
plot(x=test_ts, y=pred1$fitted,xlab='Actual', ylab='Predicted')
# ARMA(4,1)
pred1 <- forecast :: forecast(object=test_ts2, model=model1)
autoplot(pred1)
library(itsmr)
library('forecast')
rm(list = ls()) ## clearing r2studio environment
data <- read.csv(file = 'GlobalTemperatures.csv')
train_data <- data[1501:3132, "LandAverageTemperature"]
test_data <- data[3133:nrow(data), "LandAverageTemperature"]
time_series <- data[1501:nrow(data),  "LandAverageTemperature"]
# Acf and pacf
acf(time_series)
pacf(time_series)
# Remove the seasonality and trend
time_series <- time_series - season(time_series, 12) - trend(time_series, 1)
train_data_stationary = time_series[1:1632]
test_data_stationary = time_series[(1633):length(time_series)]
###
plotc(time_series)
acf(time_series, lag.max=200)
pacf(time_series, lag.max=200)
### Finding the parameters that results in the lowest AIC
#best_aic = Inf
## loop over AR order
#for (p in 0:15) {
## loop over MA
#  for (q in 0:12) {
#    fit_model <- arima(train_data_stationary, order=c(p, 0, q))
#    current_aic = fit_model$aic
#    if (current_aic < best_aic) {
#      best_p = p
#      best_q = q
#      best_aic = current_aic
#    }
#  }
#}
best_p = 10
best_q = 11
fit_model <- arima(train_data_stationary, order=c(best_p, 0, best_q))
current_aic = fit_model$aic
checkresiduals(fit_model)
# Do forecasting
forecast_data <- forecast :: forecast(object=test_data_stationary, model=fit_model)
autoplot(forecast_data)
MSRE = mean(forecast_data$residuals^2)
plot(x=test_data_stationary, y=forecast_data$fitted,xlab='Actual', ylab='Predicted')
plot(test_data_stationary, type='l', col=rgb(0, 0, 1, alpha=0.7),
xlab='Time', ylab='Value', xaxt='n', ylim=c(min(forecast_data$fitted)-1,max(forecast_data$fitted)+1))
ticks <- seq(from=1, to=length(test_data_stationary), by=floor(length(test_data_stationary)/4))
times <- full_data$UnixHour[-training_indices]
axis(1, lwd=0, lwd.ticks=1, at=ticks, labels=times[ticks])
lines(forecast_data$fitted, col=rgb(1, 0, 0, alpha=0.7))
legend('topright', legend=c('Actual', 'Predicted'), col=c('blue', 'red'),
lty=1, bty='n')
best_p = 4
best_q = 13
fit_model <- arima(train_data_stationary, order=c(best_p, 0, best_q))
current_aic = fit_model$aic
checkresiduals(fit_model)
## comment out to fit on train data
# test_data_stationary = train_data_stationary
# Do forecasting
forecast_data <- forecast :: forecast(object=test_data_stationary, model=fit_model)
autoplot(forecast_data)
MSRE = mean(forecast_data$residuals^2)
# And plot the forecasted values vs. the actual test data:
plot(x=test_data_stationary, y=forecast_data$fitted,xlab='Actual', ylab='Predicted')
# It could help more to look at the following plot:
plot(test_data_stationary, type='l', col=rgb(0, 0, 1, alpha=0.7),
xlab='Time', ylab='Value', xaxt='n', ylim=c(min(forecast_data$fitted)-1,max(forecast_data$fitted)+1))
ticks <- seq(from=1, to=length(test_data_stationary), by=floor(length(test_data_stationary)/4))
times <- full_data$UnixHour[-training_indices]
axis(1, lwd=0, lwd.ticks=1, at=ticks, labels=times[ticks])
lines(forecast_data$fitted, col=rgb(1, 0, 0, alpha=0.7))
legend('topright', legend=c('Actual', 'Predicted'), col=c('blue', 'red'),
lty=1, bty='n')
forecast_data <- forecast :: forecast(object=test_data_stationary, model=fit_model)
autoplot(forecast_data)
MSRE = mean(forecast_data$residuals^2)
# And plot the forecasted values vs. the actual test data:
plot(x=test_data_stationary, y=forecast_data$fitted,xlab='Actual', ylab='Predicted')
# It could help more to look at the following plot:
plot(test_data_stationary, type='l', col=rgb(0, 0, 1, alpha=0.7),
xlab='Time', ylab='Value', xaxt='n', ylim=c(min(forecast_data$fitted)-1,max(forecast_data$fitted)+1))
ticks <- seq(from=1, to=length(test_data_stationary), by=floor(length(test_data_stationary)/4))
times <- full_data$UnixHour[-training_indices]
axis(1, lwd=0, lwd.ticks=1, at=ticks, labels=times[ticks])
lines(forecast_data$fitted, col=rgb(1, 0, 0, alpha=0.7))
legend('topright', legend=c('Actual', 'Predicted'), col=c('blue', 'red'),
lty=1, bty='n')
source('C:/Users/haoya/OneDrive/Desktop/SF2943/project/PART1/ProjectR.R', echo=TRUE)
